- Log Out mechanism
- Implement ReadMe
- Add logger
- Users account - change password, verify account by email
- Use domain events (for example to send verification emails)
- Add some filtering for geographical criterias?
- Add dashboard with statistical analysis of geographical (and non geographical) data
- Add Vue client

- Make dev environment on docker
- Where is difference between IIS and Kestrel and it's settings?
- What about scopes during authorization? What is it actually?


Refresh tokens:
- endpoint to get all of user's refresh tokens: users/1/refresh-tokens
- endpoint to refresh token: users/refresh-token - you should receive a "200 OK" response with the user details including a JWT token in the response body and a refresh token in the response cookies.
- to revoke a refresh token so it can no longer be used to generate JWT tokens - users/revoke-token - we have to pass actual access token and refresh token to revoke

- Dashboard with statistics about salary per experience
- Dashboard with best salaries per time zone


1.1. Improve generating links
1.2. Remove the pageUriService dependency from controller
1.3. Maybe use Url.RouteUrl for genereting links
private GetHobbyListResponseDto GeneratePageLinks(UrlQueryParameters queryParameters, GetHobbyListResponseDto response)
{

    if (response.CurrentPage > 1)
    {
        var prevRoute = Url.RouteUrl(nameof(GetHobbyListAsync), new { limit = queryParameters.Limit, page = queryParameters.Page - 1 });

        response.AddResourceLink(LinkedResourceType.Prev, prevRoute);

    }

    if (response.CurrentPage < response.TotalPages)
    {
        var nextRoute = Url.RouteUrl(nameof(GetHobbyListAsync), new { limit = queryParameters.Limit, page = queryParameters.Page + 1 });

        response.AddResourceLink(LinkedResourceType.Next, nextRoute);
    }

    return response;
}